#include <iostream>
#include <iomanip>
#include <vector>
#include <string>
#include <algorithm>
#include <fstream>
#include <sstream> 
#include <cstdlib>
#include <ctime>

using std::cout;
using std::cin;
using std::endl;
using std::string;
using std::vector;
using std::setw;
using std::left;
using std::right;

struct Studentas {
    string vard;
    string pav;
    vector<int> paz;
    int egzas;
    float Vidurkiorez;
    float Medianosrez;
};

Studentas ivesk(string vard, string pav);
double median(vector<int> v);
Studentas generuoti(string vard, string pav, int ndskaicius);
vector<Studentas> nuskaityti(string failas);

int main() {
    srand(time(0));
    vector<Studentas> Grupe;
    char pasirinkimas;
    string pasirinkimas2;
    std::ofstream fout("rezultatai.txt");
    if (!fout) {
        cout << "Nepavyko sukurti rezultatu failo" << endl;
        return 1;
    }
    while (true) {
        cout << "Ar norite duomenis ivesti ranka, generuoti ar nuskaityti is failo? (ranka/generuoti/failas): "; cin >> pasirinkimas2;
        if (pasirinkimas2 == "ranka" || pasirinkimas2 == "generuoti" || pasirinkimas2 == "failas") break;
        else cout << "Ivesta neteisingai. Bandykite dar karta." << endl;
    }
    if (pasirinkimas2 == "failas") {
        Grupe = nuskaityti("studentai1000000.txt");
    }
    else {
        int kiekis;
        while (true) {
            cout << "Kiek studentu norite prideti? "; cin >> kiekis;
            if (!cin || kiekis <= 0) {
                cout << "Ivesta neteisingai. Bandykite dar karta." << endl;
                cin.clear();
                cin.ignore(1000, '\n');
                continue;
            }
            break;
        }
        for (int j = 0; j < kiekis; j++) {
            string vard, pav;
            cout << "Iveskite " << j + 1 << " studenta" << endl;
            cout << "Iveskite pavarde: "; cin >> pav;
            cout << "Iveskite varda: "; cin >> vard;
            if (pasirinkimas2 == "ranka") {
                Grupe.push_back(ivesk(vard, pav));
            }
            else if (pasirinkimas2 == "generuoti") {
                int ndskaicius = 5;
                Grupe.push_back(generuoti(vard, pav, ndskaicius));
            }
        }
    }
    std::sort(Grupe.begin(), Grupe.end(), [](const Studentas& a, const Studentas& b) {return a.pav < b.pav; });
    while (true) {
        cout << "Pasirinkite koki galutini pazymi rodyti:\na - tik vidurki\nb - tik mediana\nc - vidurki ir mediana\n"; cin >> pasirinkimas;
        if (pasirinkimas == 'a' || pasirinkimas == 'b' || pasirinkimas == 'c') break;
        else cout << "Ivesta neteisingai. Bandykite dar karta." << endl;
    }
    if (pasirinkimas == 'a') {
        fout << setw(15) << left << "Pavarde" << setw(15) << left << "Vardas" << setw(15) << left << "Galutinis (Vid.)" << endl;
        fout << "------------------------------------------------------" << endl;
        for (auto temp : Grupe) {
            fout << setw(15) << left << temp.pav << setw(15) << left << temp.vard << setw(15) << left << std::fixed << std::setprecision(2) << temp.Vidurkiorez << endl;
        }
    }
    else if (pasirinkimas == 'b') {
        fout << setw(15) << left << "Pavarde" << setw(15) << left << "Vardas" << setw(15) << left << "Galutinis (Med.)" << endl;
        fout << "------------------------------------------------------------" << endl;
        for (auto temp : Grupe) {
            fout << setw(15) << left << temp.pav << setw(15) << left << temp.vard << setw(15) << left << std::fixed << std::setprecision(2) << temp.Medianosrez << endl;
        }
    }
    else if (pasirinkimas == 'c') {
        fout << setw(15) << left << "Pavarde" << setw(15) << left << "Vardas" << setw(20) << left << "Galutinis (Vid.) / " << setw(15) << left << "Galutinis (Med.)" << endl;
        fout << "--------------------------------------------------------------------------------" << endl;
        for (auto temp : Grupe) {
            fout << setw(15) << left << temp.pav << setw(15) << left << temp.vard << setw(20) << left << std::fixed << std::setprecision(2) << temp.Vidurkiorez << setw(15) << left << std::fixed << std::setprecision(2) << temp.Medianosrez << endl;
        }
    }
}

Studentas ivesk(string vard, string pav) {
    Studentas Laik;
    Laik.vard = vard;
    Laik.pav = pav;
    int sum = 0, m;
    string ats;
    while (true) {
        while (true) {
            cout << "Iveskite pazymi: "; cin >> m;
            if (!cin || m < 1 || m>10) {
                cout << "Ivesta neteisingai. Bandykite dar karta." << endl;
                cin.clear();
                cin.ignore(1000, '\n');
                continue;
            }
            break;
        }
        Laik.paz.push_back(m);
        sum += m;
        while (true) {
            cout << "Ar norite ivesti dar viena pazymi? (taip/ne): "; cin >> ats;
            if (ats == "taip" || ats == "ne") break;
            else cout << "Ivesta neteisingai. Bandykite dar karta." << endl;
        }
        if (ats == "ne") break;
    }
    while (true) {
        cout << "Iveskite egzamina: "; cin >> Laik.egzas;
        if (!cin || Laik.egzas < 1 || Laik.egzas>10) {
            cout << "Ivesta neteisingai. Bandykite dar karta." << endl;
            cin.clear();
            cin.ignore(1000, '\n');
            continue;
        }
        break;
    }
    if (Laik.paz.empty()) {
        Laik.Vidurkiorez = Laik.Medianosrez = 0;
    }
    else {
        Laik.Vidurkiorez = Laik.egzas * 0.6 + double(sum) / double(Laik.paz.size()) * 0.4;
        Laik.Medianosrez = Laik.egzas * 0.6 + median(Laik.paz) * 0.4;
    }
    return Laik;
}

double median(vector<int> v) {
    sort(v.begin(), v.end());
    if (v.size() % 2 == 0)
        return ((v[v.size() / 2 - 1] + v[v.size() / 2]) / 2.0);
    else
        return v[v.size() / 2];
}

Studentas generuoti(string vard, string pav, int ndskaicius) {
    Studentas Laik;
    Laik.vard = vard;
    Laik.pav = pav;
    int sum = 0;
    for (int i = 0; i < ndskaicius; i++) {
        int pazymys = rand() % 10 + 1;
        Laik.paz.push_back(pazymys);
        sum += pazymys;
    }
    Laik.egzas = rand() % 10 + 1;
    Laik.Vidurkiorez = Laik.egzas * 0.6 + double(sum) / double(Laik.paz.size()) * 0.4;
    Laik.Medianosrez = Laik.egzas * 0.6 + median(Laik.paz) * 0.4;
    return Laik;
}

vector<Studentas> nuskaityti(string failas) {
    vector<Studentas> Grupe;
    std::ifstream fd(failas);
    if (!fd) {
        cout << "Nepavyko atidaryti failo";
        return Grupe;
    }
    string antraste;
    getline(fd, antraste);
    Studentas Laik;
    while (fd >> Laik.vard >> Laik.pav) {
        Laik.paz.clear();
        int pazymys;
        vector<int> laikini;
        while (fd.peek() != '\n' && fd >> pazymys) {
            laikini.push_back(pazymys);
        }
        if (laikini.empty()) continue;
        Laik.egzas = laikini.back();
        laikini.pop_back();
        int sum = 0;
        for (int x : laikini) {
            Laik.paz.push_back(x);
            sum += x;
        }
        Laik.Vidurkiorez = Laik.egzas * 0.6 + double(sum) / Laik.paz.size() * 0.4;
        Laik.Medianosrez = Laik.egzas * 0.6 + median(Laik.paz) * 0.4;
        Grupe.push_back(Laik);
    }
    return Grupe;
}
