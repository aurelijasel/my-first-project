#include <iostream>
#include <iomanip>
#include <vector>
#include <string>
#include <algorithm>
#include <cstdlib>
#include <ctime>

using std::cout;
using std::cin;
using std::endl;
using std::string;
using std::vector;
using std::setw;
using std::left;
using std::right;

struct Studentas {
    string vard;
    string pav;
    vector<int> paz;
    int egzas;
    float Vidurkiorez;
    float Medianosrez;
};

Studentas ivesk(string vard, string pav);
double median(vector<int> v);
Studentas generuoti(string vard, string pav, int ndskaicius);

int main (){
    srand(time(0));
    vector<Studentas> Grupe;
    char pasirinkimas;
    string pasirinkimas2;
    for (int j=0; j<3; j++){
        cout << "Iveskite " << j+1 << " studenta\n";
        string vard, pav;
        cout << "Iveskite pavarde: "; cin >> pav;
        cout << "Iveskite varda: "; cin >> vard;
        while(true){
            cout << "Ar norite balus ivesti rankiniu budu ar generuoti atsitiktinai? (ranka/generuoti): "; cin >> pasirinkimas2;
            if(pasirinkimas2 == "ranka" || pasirinkimas2 == "generuoti") break;
            else cout << "Ivesta neteisingai. Bandykite dar karta." << endl;
        }
        if(pasirinkimas2 == "ranka") Grupe.push_back(ivesk(vard, pav));
        else {
            int ndskaicius;
            cout << "Kiek namu darbu sugeneruoti? "; cin >> ndskaicius;
            Grupe.push_back(generuoti(vard, pav, ndskaicius));
        }
    }
    cout << "Pasirinkite koki galutini pazymi rodyti:\na - tik vidurki\nb - tik mediana\nc - vidurki ir mediana\n"; cin >> pasirinkimas;

    if(pasirinkimas=='a'){
        cout<<setw(15)<<left<<"Pavarde"<<setw(15)<<left<<"Vardas"<<setw(15)<<left<<"Galutinis (Vid.)"<<endl;
        cout<<"------------------------------------------------------"<<endl;
        for (auto temp :Grupe){
        cout<<setw(15)<<left<<temp.pav<<setw(15)<<left<<temp.vard<<setw(15)<<left<<std::fixed<<std::setprecision(2)<<temp.Vidurkiorez<<endl;
        }
    }
    else if(pasirinkimas=='b'){
        cout<<setw(15)<<left<<"Pavarde"<<setw(15)<<left<<"Vardas"<<setw(15)<<left<<"Galutinis (Med.)"<<endl;
        cout<<"------------------------------------------------------------"<<endl;
        for (auto temp :Grupe){
            cout<<setw(15)<<left<<temp.pav<<setw(15)<<left<<temp.vard<<setw(15)<<left<<std::fixed<<std::setprecision(2)<<temp.Medianosrez<<endl;
        }
    }
    else if(pasirinkimas=='c'){
        cout<<setw(15)<<left<<"Pavarde"<<setw(15)<<left<<"Vardas"<<setw(20)<<left<<"Galutinis (Vid.) / "<<setw(20)<<left<<"Galutinis (Med.)"<<endl;
        cout<<"--------------------------------------------------------------------------------"<<endl;
        for (auto temp :Grupe){
            cout<<setw(15)<<left<<temp.pav<<setw(15)<<left<<temp.vard<<setw(20)<<left<<std::fixed<<std::setprecision(2)<<temp.Vidurkiorez<<setw(20)<<left<<std::fixed<<std::setprecision(2)<<temp.Medianosrez<<endl;
        }
    }
}

Studentas ivesk(){
    Studentas Laik;
    Laik.vard = vard;
    Laik.pav = pav;
    int sum=0, m;
    string ats;
    while(true){
        cout<<"Iveskite pazymi: "; cin>>m;
        Laik.paz.push_back(m);
        sum += m;
        while(true){
            cout<<"Ar norite ivesti dar viena pazymi? (taip/ne): ";  cin>>ats;
            if(ats == "taip" || ats == "ne") break;
            else cout<<"Ivesta neteisingai. Bandykite dar karta."<<endl;
        }
    if(ats == "ne") break;
    }
    cout<<"Iveskite egzamina: "; cin>>Laik.egzas;
    Laik.Vidurkiorez=Laik.egzas*0.6+double(sum)/double(Laik.paz.size())*0.4;
    Laik.Medianosrez=Laik.egzas*0.6+median(Laik.paz)*0.4;
    return Laik;
}

double median(vector<int> v){
sort(v.begin(), v.end());
if(v.size()%2==0)
    return (v[v.size()/2-1]+v[v.size()/2])/2;
else
    return v[v.size()/2];
}

Studentas generuoti(string vard, string pav, int ndskaicius){
    Studentas Laik;
    Laik.vard = vard;
    Laik.pav = pav;
    int sum = 0;
    for(int i = 0; i < ndskaicius; i++){
        int pazymys = rand() % 10 + 1;
        Laik.paz.push_back(pazymys);
        sum += pazymys;
    }
    Laik.egzas = rand() % 10 + 1;
    Laik.Vidurkiorez = Laik.egzas*0.6 + double(sum)/double(Laik.paz.size())*0.4;
    Laik.Medianosrez = Laik.egzas*0.6 + median(Laik.paz)*0.4;
    return Laik;
}
